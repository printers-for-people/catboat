# This file defines the default layout of the printer's menu.

# It is not necessary to edit this file to change the menu. Instead,
# one may override any of the sections defined here by defining a
# section with the same name in the main printer.cfg config file.

# For future DangerKlipper developers who choose this descent into
# madness, editing this as a single 1000+ line file is tedious and error
# prone. I have published a simplistic "make" build system attached to
# the new_menu github PR, including all the structured source files.
# Ref: https://github.com/DangerKlippers/danger-klipper/pull/364
#
# In the future, I hope to replace this with something much cleaner and
# less terrible to try and read.
#
# "There is no greater sorrow then to recall our times of joy in
#  wretchedness." - Dante Alighieri, Inferno
#
# - frank.af, Sept. 2024

### DEFAULT MENU ###
# Main
#   + Pause printing
#   + Resume printing
#   + Abort printing
#   + SD Card
#       + ... (files)
#   + Tune
#       + Speed: 000%
#       + Flow: 000%
#       + Offset Z:00.00
#       + Pressure Advance
#           + Advance:000.0
#           + Smooth:000.0
#       + FW Retraction
#           + Retract 000.0mm
#           + Ret Spd 000.0
#           + Unret 000.0mm
#           + Unret Spd 000.0
#   + Control
#       + Home All
#       + Home Z
#       + Home X/Y
#       + Z Tilt
#       + Quad Gantry Lvl
#       + Bed Mesh
#       + Steppers off
#       + Fan: OFF
#       + Fan speed: 000%
#       + Lights: OFF
#       + Lights: 000%
#       + Move 10mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#       + Move 1mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#       + Move 0.1mm
#           + Move X:000.0
#           + Move Y:000.0
#           + Move Z:000.0
#           + Move E:+000.0
#   + Temperature
#       + Ex0:000 (0000)
#       + Ex1:000 (0000)
#       + Ex2:000 (0000)
#       + Ex3:000 (0000)
#       + Ex4:000 (0000)
#       + Ex5:000 (0000)
#       + Bed:000 (0000)
#       + Preheat PLA
#           + Preheat all
#           + Preheat hotend
#           + Preheat hotbed
#       + Preheat ABS
#           + Preheat all
#           + Preheat hotend
#           + Preheat hotbed
#       + Cooldown
#           + Cooldown all
#           + Cooldown hotend
#           + Cooldown hotbed
#   + Filament
#       + Ex0:000 (0000)
#       > if `gcode_macro UNLOAD_FILAMENT`
#         + Load Filament    (gcode_macro LOAD_FILAMENT)
#       > else
#       + Load Fil. fast
#       + Load Fil. slow
#       > if `gcode_macro UNLOAD_FILAMENT`
#         + Unload Filament  (gcode_macro UNLOAD_FILAMENT)
#       > else
#         + Unload Fil.fast
#         + Unload Fil.slow
#       + Feed: 000.0
#       + Release Motor (disable the extruder stepper)
#   + Setup
#       + Save config
#           + Save & restart
#           + Save no restart
#       + Restart
#           + Restart host
#           + Restart FW
#       + Heater tuning
#           + Tune Hotend PID  (if extruder.control = pid)
#           + Tune Hotend MPC  (if extruder.control = mpc)
#           + Tune Hotbed PID  (if heater_bed.control = pid)
#           + Tune Hotbed MPC  (if heater_bed.control = mpc)
#       + Calibration
#           + Bed Screws Adjustment
#           + Screw Tilt Calc
#           + Delta cal. auto
#           + Delta cal. man
#               + Start probing
#               + Move Z: 000.00
#               + Test Z: ++
#               + Accept
#               + Abort
#           + Bed probe
#       + Dump parameters

### menu main ###
[menu __main]
type: list
name: Main

[menu __main __pause]
type: command
enable: {printer.print_stats.state == "printing"}
name: Pause printing
gcode:
    PAUSE

[menu __main __resume]
type: command
enable: {printer.print_stats.state == "paused"}
name: Resume printing
gcode:
    RESUME

[menu __main __abort]
type: command
name: Cancel print
enable: {printer.print_stats.state in ("printing", "paused")}
gcode:
    CLEAR_PAUSE
    CANCEL_PRINT

### menu virtual sdcard, using new file_browser ###
[menu __main __sdcard]
type: file_browser
enable: {('virtual_sdcard' in printer) and (printer.print_stats.state not in ("printing", "paused"))}
name: SD Card

### menu tune ###
[menu __main __tune]
type: list
enable: {printer.print_stats.state in ("printing", "paused")}
name: Tune

[menu __main __tune __speed]
type: input
name: Speed: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.speed_factor}
input_min: 0.01
input_max: 5
input_step: 0.01
realtime: True
gcode:
    M220 S{'%d' % (menu.input*100)}

[menu __main __tune __flow]
type: input
name: Flow: {'%3d' % (menu.input*100)}%
input: {printer.gcode_move.extrude_factor}
input_min: 0.01
input_max: 2
input_step: 0.01
realtime: True
gcode:
    M221 S{'%d' % (menu.input*100)}

[menu __main __tune __offsetz]
type: input
name: Offset Z:{'%05.3f' % menu.input}
input: {printer.gcode_move.homing_origin.z}
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    SET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1

[menu __main __tune __pressure_advance]
type: list
name: Pressure Advance

[menu __main __tune __pressure_advance __pressure_advance]
type: input
name: Pres Adv:{"%05.3f" % menu.input}
input: {printer.extruder.pressure_advance}
input_min: 0
input_max: 0.10
input_step: 0.001
realtime: False
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={"%.3f" % menu.input}

[menu __main __tune __pressure_advance __smooth_time]
type: input
name: Smooth:{'%05.3f' % menu.input}
input: {printer.extruder.smooth_time}
input_min: 0
input_max: 0.10
input_step: 0.001
realtime: False
gcode:
  SET_PRESSURE_ADVANCE SMOOTH_TIME={'%.3f' %menu.input}

[menu __main __tune __retraction]
type: list
name: Fw Retraction
enable: {'firmware_retraction' in printer}

[menu __main __tune __retraction __retract_length]
type: input
name: Rtrct {'%04.2f' % menu.input}mm
input: {printer.firmware_retraction.retract_length}
input_min: 0
input_step: 0.05
realtime: False
gcode:
  SET_RETRACTION RETRACT_LENGTH={'%.2f' %menu.input}

[menu __main __tune __retraction __retract_speed]
type: input
name: Rtrct spd {'%03.0f' % menu.input}
input: {printer.firmware_retraction.retract_speed}
input_min: 1
input_step: 1.0
realtime: False
gcode:
  SET_RETRACTION RETRACT_SPEED={'%.1f' %menu.input}

[menu __main __tune __retraction __z_hop_height]
type: input
name: Z Hop {'%03.0f' % menu.input}mm
input: {printer.firmware_retraction.z_hop_height}
input_min: 0
input_step: 0.1
realtime: False
gcode:
  SET_RETRACTION Z_HOP_HEIGHT={'%.1f' %menu.input}

[menu __main __tune __retraction __unretract_length]
type: input
name: Unret Xtra {'%04.3f' % menu.input}mm
input: {printer.firmware_retraction.unretract_extra_length}
input_min: -1
input_step: 0.005
realtime: False
gcode:
  SET_RETRACTION UNRETRACT_EXTRA_LENGTH={'%.3f' %menu.input}

[menu __main __tune __retraction __unretract_speed]
type: input
name: Unret spd {'%03.0f' % menu.input}
input: {printer.firmware_retraction.unretract_speed}
input_min: 1
input_max: 100.0
input_step: 1.0
realtime: False
gcode:
  SET_RETRACTION UNRETRACT_SPEED={'%.1f' %menu.input}

### menu control ###
[menu __main __control]
type: list
name: Control

[menu __main __control __home]
type: command
enable: {printer.print_stats.state != "printing"}
name: Home All
gcode: G28

[menu __main __control __homez]
type: command
enable: {printer.print_stats.state != "printing"}
name: Home Z
gcode: G28 Z

[menu __main __control __homexy]
type: command
enable: {printer.print_stats.state != "printing"}
name: Home X/Y
gcode: G28 X Y

[menu __main __control __z_tilt]
type: command
enable: {printer.print_stats.state != "printing" and ('z_tilt' in printer)}
name: Z Tilt
gcode: Z_TILT_ADJUST

[menu __main __control __quad_gantry_level]
type: command
enable: {printer.print_stats.state != "printing" and ('quad_gantry_level' in printer)}
name: Quad Gantry Lvl
gcode: QUAD_GANTRY_LEVEL

[menu __main __control __bed_mesh]
type: command
enable: {printer.print_stats.state != "printing" and ('bed_mesh' in printer)}
name: Bed Mesh
gcode: BED_MESH_CALIBRATE

[menu __main __control __disable]
type: command
name: Steppers off
gcode:
    M84
    M18

[menu __main __control __fanonoff]
type: input
enable: {'fan' in printer}
name: Fan: {'ON ' if menu.input else 'OFF'}
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 1
gcode:
    M106 S{255 if menu.input else 0}

[menu __main __control __fanspeed]
type: input
enable: {'fan' in printer}
name: Fan speed: {'%3d' % (menu.input*100)}%
input: {printer.fan.speed}
input_min: 0
input_max: 1
input_step: 0.01
gcode:
    M106 S{'%d' % (menu.input*255)}

[menu __main __control __caselightonoff]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'ON ' if menu.input else 'OFF'}
input: {printer['output_pin caselight'].value}
input_min: 0
input_max: 1
input_step: 1
gcode:
    SET_PIN PIN=caselight VALUE={1 if menu.input else 0}

[menu __main __control __caselightpwm]
type: input
enable: {'output_pin caselight' in printer}
name: Lights: {'%3d' % (menu.input*100)}%
input: {printer['output_pin caselight'].value}
input_min: 0.0
input_max: 1.0
input_step: 0.01
gcode:
    SET_PIN PIN=caselight VALUE={menu.input}

### menu move 10mm ###
[menu __main __control __move_10mm]
type: list
enable: {printer.print_stats.state != "printing"}
name: Move 10mm

[menu __main __control __move_10mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_z]
type: input
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_10mm __axis_e]
type: input
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 10.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 1mm ###
[menu __main __control __move_1mm]
type: list
enable: {printer.print_stats.state != "printing"}
name: Move 1mm

[menu __main __control __move_1mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_z]
type: input
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_1mm __axis_e]
type: input
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 1.0
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu move 0.1mm ###
[menu __main __control __move_01mm]
type: list
enable: {printer.print_stats.state != "printing"}
name: Move 0.1mm

[menu __main __control __move_01mm __axis_x]
type: input
name: Move X:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.x}
input_min: {printer.toolhead.axis_minimum.x}
input_max: {printer.toolhead.axis_maximum.x}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 X{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_y]
type: input
name: Move Y:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.y}
input_min: {printer.toolhead.axis_minimum.y}
input_max: {printer.toolhead.axis_maximum.y}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Y{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_z]
type: input
name: Move Z:{'%05.1f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_min: 0
input_max: {printer.toolhead.axis_maximum.z}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    G90
    G1 Z{menu.input}
    RESTORE_GCODE_STATE NAME=__move__axis

[menu __main __control __move_01mm __axis_e]
type: input
name: Move E:{'%+06.1f' % menu.input}
input: 0
input_min: -{printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_max: {printer.configfile.config.extruder.max_extrude_only_distance|default(50)}
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__move__axis
    M83
    G1 E{menu.input} F240
    RESTORE_GCODE_STATE NAME=__move__axis

### menu temperature ###
[menu __main __temp]
type: list
name: Temperature

[menu __main __temp __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __temp __hotend1_target]
type: input
enable: {('extruder1' in printer) and ('extruder1' in printer.heaters.available_heaters)}
name: {"Ex1:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T1 S{'%.0f' % menu.input}

[menu __main __temp __hotend2_target]
type: input
enable: {('extruder2' in printer) and ('extruder2' in printer.heaters.available_heaters)}
name: {"Ex2:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T2 S{'%.0f' % menu.input}

[menu __main __temp __hotend3_target]
type: input
enable: {('extruder3' in printer) and ('extruder3' in printer.heaters.available_heaters)}
name: {"Ex3:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T3 S{'%.0f' % menu.input}

[menu __main __temp __hotend4_target]
type: input
enable: {('extruder4' in printer) and ('extruder4' in printer.heaters.available_heaters)}
name: {"Ex4:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T4 S{'%.0f' % menu.input}

[menu __main __temp __hotend5_target]
type: input
enable: {('extruder5' in printer) and ('extruder5' in printer.heaters.available_heaters)}
name: {"Ex5:%3.0f (%4.0f)" % (menu.input, printer.extruder1.temperature)}
input: {printer.extruder1.target}
input_min: 0
input_max: {printer.configfile.config.extruder1.max_temp}
input_step: 1
gcode: M104 T5 S{'%.0f' % menu.input}

[menu __main __temp __hotbed_target]
type: input
enable: {'heater_bed' in printer}
name: {"Bed:%3.0f (%4.0f)" % (menu.input, printer.heater_bed.temperature)}
input: {printer.heater_bed.target}
input_min: 0
input_max: {printer.configfile.config.heater_bed.max_temp}
input_step: 1
gcode: M140 S{'%.0f' % menu.input}

[menu __main __temp __preheat_pla]
type: list
name: Preheat PLA

[menu __main __temp __preheat_pla __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S60
    M104 S200

[menu __main __temp __preheat_pla __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S200

[menu __main __temp __preheat_pla __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S60

[menu __main __temp __preheat_abs]
type: list
name: Preheat ABS

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S110
    M104 S245

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S245

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S110

[menu __main __temp __cooldown]
type: list
enable: {(('extruder' in printer) and printer.extruder.target) or (('heater_bed' in printer) and printer.heater_bed.target)}
name: Cooldown

[menu __main __temp __cooldown __all]
type: command
name: Cooldown all
gcode:
    M104 S0
    M140 S0

[menu __main __temp __cooldown __hotend]
type: command
enable: {(('extruder' in printer) and printer.extruder.target)}
name: Cooldown hotend
gcode: M104 S0

[menu __main __temp __cooldown __hotbed]
type: command
enable: {(('heater_bed' in printer) and printer.heater_bed.target)}
name: Cooldown hotbed
gcode: M140 S0

### menu filament ###

[menu __main __filament]
type: list
enable: {printer.print_stats.state != "printing"}
name: Filament

[menu __main __filament __hotend0_target]
type: input
enable: {('extruder' in printer) and ('extruder' in printer.heaters.available_heaters)}
name: {"Ex0:%3.0f (%4.0f)" % (menu.input, printer.extruder.temperature)}
input: {printer.extruder.target}
input_min: 0
input_max: {printer.configfile.config.extruder.max_temp}
input_step: 1
gcode: M104 T0 S{'%.0f' % menu.input}

[menu __main __filament __custom_load]
type: command
name: Load Filament
enable: {'gcode_macro LOAD_FILAMENT' in printer}
gcode:
    LOAD_FILAMENT

[menu __main __filament __loadf]
type: command
name: Load Fil. fast
enable: {'gcode_macro LOAD_FILAMENT' not in printer}
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __loads]
type: command
name: Load Fil. slow
enable: {'gcode_macro LOAD_FILAMENT' not in printer}
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __custom_unload]
type: command
name: Unload Filament
enable: {'gcode_macro UNLOAD_FILAMENT' in printer}
gcode:
    UNLOAD_FILAMENT

[menu __main __filament __unloadf]
type: command
name: Unload Fil.fast
enable: {'gcode_macro UNLOAD_FILAMENT' not in printer}
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F960
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __unloads]
type: command
name: Unload Fil.slow
enable: {'gcode_macro UNLOAD_FILAMENT' not in printer}
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F240
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __feed]
type: input
name: Feed: {'%.1f' % menu.input}
input: 5
input_step: 0.1
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E{'%.1f' % menu.input} F60
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __releasemotor]
type: command
name: Release Motor
enable: {printer.stepper_enable.extruder}
gcode:
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0

### menu setup ###
[menu __main __setup]
type: list
enable: {printer.print_stats.state not in ("paused", "printing")}
name: Setup

[menu __main __setup __save_config]
type: list
name: Save config
enable: {printer.configfile.save_config_pending}

[menu __main __setup __save_config __restart]
type: command
name: Save & restart
gcode: SAVE_CONFIG RESTART=1

[menu __main __setup __save_config __no_restart]
type: command
name: Save no restart
gcode: SAVE_CONFIG RESTART=0

[menu __main __setup __restart]
type: list
name: Restart

[menu __main __setup __restart __host_restart]
type: command
name: Restart host
gcode: RESTART

[menu __main __setup __restart __firmware_restart]
type: command
name: Restart FW
gcode: FIRMWARE_RESTART

[menu __main __setup __tuning]
type: list
name: PID tuning

[menu __main __setup __tuning __hotend_pid_dialog]
type: dialog
enable: {('extruder' in printer) and (printer.configfile.settings.extruder.control in ('pid', 'pid_v'))}
name: Hotend PID
confirm_text: Start Tune
gcode:
    PID_CALIBRATE HEATER=extruder TARGET={dialog.target} WRITE_FILE=1
    {menu.exit()}

[menu __main __setup __tuning __hotend_pid_dialog target]
type: input
name: Target  {menu.input|int}C
input: {(((printer.configfile.config.extruder.min_extrude_temp|int + printer.configfile.config.extruder.max_temp|int) / 10) | int) * 5}
input_min: {printer.configfile.config.extruder.min_extrude_temp|int - 1}
input_max: {printer.configfile.config.extruder.max_temp|int - 5}
input_step: 1

[menu __main __setup __tuning __hotend_mpc_dialog]
type: dialog
enable: {('extruder' in printer) and (printer.configfile.settings.extruder.control == 'mpc')}
name: Hotend MPC
confirm_text: Start Tune
gcode:
    MPC_CALIBRATE HEATER=extruder TARGET={dialog.target}
        {%- if dialog.fan_breakpoints               %} FAN_BREAKPOINTS={dialog.fan_breakpoints}                         {%- endif %}
        {%- if dialog.use_delta|default(0)|int == 1 %} USE_DELTA=1                                                      {%- endif %}
        {%- if dialog.ambient_max_measure_time      %} AMBIENT_MAX_MEASURE_TIME={dialog.ambient_max_measure_time}       {%- endif %}
        {%- if dialog.ambient_measure_sample_time   %} AMBIENT_MEASURE_SAMPLE_TIME={dialog.ambient_measure_sample_time} {%- endif %}
        {%- if dialog.threshold                     %} THRESHOLD={dialog.threshold}                                     {%- endif %}
    {menu.exit()}

[menu __main __setup __tuning __hotend_mpc_dialog target]
type: input
name: Target  {menu.input|int}C
input: {(((printer.configfile.config.extruder.min_extrude_temp|int + printer.configfile.config.extruder.max_temp|int) / 10) | int) * 5}
input_min: {printer.configfile.config.extruder.min_extrude_temp|int}
input_max: {printer.configfile.config.extruder.max_temp|int - 5}
input_step: 1

[menu __main __setup __tuning __hotend_mpc_dialog fan_breakpoints]
type: input
enable: {'cooling_fan' in printer.configfile.config.extruder}
name: Fan Bpkts  {menu.input|int}
input: 3
input_min: 2
input_max: 10
input_step: 1

[menu __main __setup __tuning __hotend_mpc_dialog advanced_options]
type: input
name: Advanced? {'Yes' if menu.input|int else 'No'}
realtime: True
input: 0
input_min: 0
input_max: 1

[menu __main __setup __tuning __hotend_mpc_dialog use_delta]
type: input
enable: {dialog.advanced_options == 1}
name: Use Delta? {"Yes" if menu.input|int else "No"}
input: 0
input_min: 0
input_max: 1

[menu __main __setup __tuning __hotend_mpc_dialog ambient_max_measure_time]
type: input
enable: {(dialog.advanced_options == 1) and ('ambient_temp_sensor' in printer.configfile.config.extruder)}
name: Amb Max  {menu.input|int}s
input: 20.0
input_min: 1

[menu __main __setup __tuning __hotend_mpc_dialog ambient_measure_sample_time]
type: input
enable: {(dialog.advanced_options == 1) and ('ambient_temp_sensor' in printer.configfile.config.extruder)}
name: Amb Samp {menu.input|int}s
input: 5.0
input_min: 1
input_max: {dialog.ambient_max_measure_time | default(20.0)}


[menu __main __setup __tuning __heater_bed_pid_dialog]
type: dialog
enable: {('heater_bed' in printer) and (printer.configfile.settings.heater_bed.control in ('pid', 'pid_v'))}
name: Hotbed PID
confirm_text: Start Tune
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET={dialog.target} WRITE_FILE=1
    {menu.exit()}

[menu __main __setup __tuning __heater_bed_pid_dialog target]
type: input
name: Target: {menu.input|int}C
input: {printer.configfile.config.heater_bed.max_temp|int - 15}
input_min: 40
input_max: {printer.configfile.config.heater_bed.max_temp|int - 5}
input_step: 1

[menu __main __setup __tuning __heater_bed_mpc_dialog]
type: dialog
enable: {('heater_bed' in printer) and (printer.configfile.settings.heater_bed.control == 'mpc')}
name: Hotbed MPC
confirm_text: Start Tune
gcode:
    MPC_CALIBRATE HEATER=heater_bed TARGET={dialog.target}
        {%- if dialog.fan_breakpoints               %} FAN_BREAKPOINTS={dialog.fan_breakpoints}                         {%- endif %}
        {%- if dialog.use_delta|default(0)|int == 1 %} USE_DELTA=1                                                      {%- endif %}
        {%- if dialog.ambient_max_measure_time      %} AMBIENT_MAX_MEASURE_TIME={dialog.ambient_max_measure_time}       {%- endif %}
        {%- if dialog.ambient_measure_sample_time   %} AMBIENT_MEASURE_SAMPLE_TIME={dialog.ambient_measure_sample_time} {%- endif %}
        {%- if dialog.threshold                     %} THRESHOLD={dialog.threshold}                                     {%- endif %}
    {menu.exit()}

[menu __main __setup __tuning __heater_bed_mpc_dialog target]
type: input
name: Target  {menu.input|int}C
input: {printer.configfile.config.heater_bed.max_temp|int - 15}
input_min: 40
input_max: {printer.configfile.config.heater_bed.max_temp|int - 5}
input_step: 1

[menu __main __setup __tuning __heater_bed_mpc_dialog fan_breakpoints]
type: input
enable: {'cooling_fan' in printer.configfile.config.heater_bed}
name: Fan Bpkts  {menu.input|int}
input: 3
input_min: 2
input_max: 10
input_step: 1

[menu __main __setup __tuning __heater_bed_mpc_dialog advanced_options]
type: input
name: Advanced? {'Yes' if menu.input|int else 'No'}
realtime: True
input: 0
input_min: 0
input_max: 1

[menu __main __setup __tuning __heater_bed_mpc_dialog use_delta]
type: input
enable: {dialog.advanced_options == 1}
name: Use Delta? {"Yes" if menu.input|int else "No"}
input: 0
input_min: 0
input_max: 1

[menu __main __setup __tuning __heater_bed_mpc_dialog ambient_max_measure_time]
type: input
enable: {(dialog.advanced_options == 1) and ('ambient_temp_sensor' in printer.configfile.config.heater_bed)}
name: Amb Max  {menu.input|int}s
input: 20.0
input_min: 1

[menu __main __setup __tuning __heater_bed_mpc_dialog ambient_measure_sample_time]
type: input
enable: {(dialog.advanced_options == 1) and ('ambient_temp_sensor' in printer.configfile.config.heater_bed)}
name: Amb Samp {menu.input|int}s
input: 5.0
input_min: 1
input_max: {dialog.ambient_max_measure_time | default(20.0)}

[menu __main __setup __calib]
type: list
name: Calibration

[menu __main __setup __calib __bed_screws_adjust]
type: list
enable: {'bed_screws' in printer}
name: Bed Screw Adj

[menu __main __setup __calib __bed_screws_adjust __start]
type: command
enable: {not printer.bed_screws.is_active}
name: Start Alignment
gcode:
    {% if 'xyz' not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    BED_SCREWS_ADJUST

[menu __main __setup __calib __bed_screws_adjust __current_screw]
type: command
enable: {printer.bed_screws.is_active}
name: {printer.bed_screws.current_screw}
gcode:
    G4 P0  # Do nothing

[menu __main __setup __calib __bed_screws_adjust __accept]
type: command
enable: {printer.bed_screws.is_active}
name: Accept
gcode:
    ACCEPT

[menu __main __setup __calib __bed_screws_adjust __adjusted]
type: command
enable: {printer.bed_screws.is_active}
name: Adjusted
gcode:
    ADJUSTED

[menu __main __setup __calib __bed_screws_adjust __abort]
type: command
enable: {printer.bed_screws.is_active}
name: Abort
gcode:
    M117 Adjust Aborted
    ABORT

[menu __main __setup __calib __screws_tilt_calculate]
type: command
enable: {'screws_tilt_adjust' in printer}
name: Screw Tilt Calc
gcode:
  SCREWS_TILT_CALCULATE

[menu __main __setup __calib __delta_calib_auto]
type: command
enable: {'delta_calibrate' in printer}
name: Delta cal. auto
gcode:
    {% if 'xyz' not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    DELTA_CALIBRATE

[menu __main __setup __calib __delta_calib_man]
type: list
enable: {'delta_calibrate' in printer}
name: Delta cal. man

[menu __main __setup __calib __bedprobe]
type: command
enable: {'probe' in printer}
name: Bed probe
gcode: PROBE

[menu __main __setup __calib __delta_calib_man __start]
type: command
name: Start probing
gcode:
    {% if 'xyz' not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    DELTA_CALIBRATE METHOD=manual

[menu __main __setup __calib __delta_calib_man __move_z]
type: input
name: Move Z: {'%03.2f' % menu.input}
input: {printer.gcode_move.gcode_position.z}
input_step: 1
realtime: True
gcode:
    {%- if menu.event == 'change' -%}
        G1 Z{'%.2f' % menu.input}
    {%- elif menu.event == 'long_click' -%}
        G1 Z{'%.2f' % menu.input}
        SAVE_GCODE_STATE NAME=__move__axis
        G91
        G1 Z2
        G1 Z-2
        RESTORE_GCODE_STATE NAME=__move__axis
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __test_z]
type: input
name: Test Z: {['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
input: 6
input_min: 0
input_max: 11
input_step: 1
gcode:
    {%- if menu.event == 'long_click' -%}
        TESTZ Z={['++','+','+.01','+.05','+.1','+.5','-.5','-.1','-.05','-.01','-','--'][menu.input|int]}
    {%- endif -%}

[menu __main __setup __calib __delta_calib_man __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __setup __calib __delta_calib_man __abort]
type: command
name: Abort
gcode: ABORT


[menu __main __setup __dump]
type: command
name: Dump parameters
gcode:
   {% for name1 in printer %}
      {% for name2 in printer[name1] %}
         { action_respond_info("printer['%s'].%s = %s"
                               % (name1, name2, printer[name1][name2])) }
      {% else %}
         { action_respond_info("printer['%s'] = %s" % (name1, printer[name1])) }
      {% endfor %}
   {% endfor %}
